"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.statusCiWorkflow = exports.updatesCiWorkflow = exports.updateTemplateCiWorkflow = exports.summaryCiWorkflow = exports.siteCiWorkflow = exports.setupCiWorkflow = exports.responseTimeCiWorkflow = exports.graphsCiWorkflow = exports.getstatusMonitorVersion = void 0;
const config_1 = require("./config");
const constants_1 = require("./constants");
const github_1 = require("./github");
let release = undefined;
const getstatusMonitorVersion = async () => {
    if (release)
        return release;
    const octokit = await github_1.getOctokit();
    const releases = await octokit.repos.listReleases({
        owner: "CitybookServicesLTD",
        repo: "status-monitor",
        per_page: 1,
    });
    release = releases.data[0].tag_name;
    return release;
};
exports.getstatusMonitorVersion = getstatusMonitorVersion;
const introComment = async () => `#
# ===============================
# Do not edit this file directly!
# ===============================
#
# Your changes will be overwritten when the CitybookServicesLTD template updates (by default, weekly)
# Instead, change .CitybookServicesLTDrc.yml configuration and the workflows will be generated accordingly.
#
# ðŸ”¼ CitybookServicesLTD @${await exports.getstatusMonitorVersion()}
# GitHub-powered open-source status monitor and status page by Anand Chowdhary

# * Source: https://github.com/CitybookServicesLTD/status
# * Docs and more: https://CitybookServicesLTD.js.org
# * More by Anand Chowdhary: https://anandchowdhary.com
`;
const graphsCiWorkflow = async () => {
    const config = await config_1.getConfig();
    const workflowSchedule = config.workflowSchedule || {};
    return `${await introComment()}

name: Graphs CI
on:
  schedule:
    - cron: "${workflowSchedule.graphs || constants_1.GRAPHS_CI_SCHEDULE}"
  repository_dispatch:
    types: [graphs]
  workflow_dispatch:
jobs:
  release:
    name: Generate graphs
    runs-on: ${config.runner || constants_1.DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Generate graphs
        uses: CitybookServicesLTD/status-monitor@${await exports.getstatusMonitorVersion()}
        with:
          command: "graphs"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
`;
};
exports.graphsCiWorkflow = graphsCiWorkflow;
const getHasIpV6Site = async () => {
    const config = await config_1.getConfig();
    const hasIpV6 = !!config.sites.find((site) => site.ipv6);
    if (hasIpV6)
        console.log("Detected IPv6 site, adding WARP setup step");
    else
        console.log("No IPv6 sites detected, skipping WARP setup step", JSON.stringify(config.sites));
    return hasIpV6;
};
const responseTimeCiWorkflow = async () => {
    const config = await config_1.getConfig();
    const workflowSchedule = config.workflowSchedule || {};
    return `${await introComment()}

name: Response Time CI
on:
  schedule:
    - cron: "${workflowSchedule.responseTime || constants_1.RESPONSE_TIME_CI_SCHEDULE}"
  repository_dispatch:
    types: [response_time]
  workflow_dispatch:
jobs:
  release:
    name: Check status
    runs-on: ${config.runner || constants_1.DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update response time
        uses: CitybookServicesLTD/status-monitor@${await exports.getstatusMonitorVersion()}
        with:
          command: "response-time"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
          SECRETS_CONTEXT: \${{ toJson(secrets) }}
`;
};
exports.responseTimeCiWorkflow = responseTimeCiWorkflow;
const setupCiWorkflow = async () => {
    const config = await config_1.getConfig();
    const commitMessages = config.commitMessages || {};
    const statusWebsite = config["status-website"] || {};
    return `${await introComment()}

name: Setup CI
on:
  push:
    paths:
      - ".CitybookServicesLTDrc.yml"
  repository_dispatch:
    types: [setup]
  workflow_dispatch:
jobs:
  release:
    name: Setup CitybookServicesLTD
    runs-on: ${config.runner || constants_1.DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update template
        uses: CitybookServicesLTD/status-monitor@${await exports.getstatusMonitorVersion()}
        with:
          command: "update-template"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
      - name: Update response time
        uses: CitybookServicesLTD/status-monitor@${await exports.getstatusMonitorVersion()}
        with:
          command: "response-time"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
          SECRETS_CONTEXT: \${{ toJson(secrets) }}
      - name: Update summary in README
        uses: CitybookServicesLTD/status-monitor@${await exports.getstatusMonitorVersion()}
        with:
          command: "readme"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
      - name: Generate graphs
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Graphs CI
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Generate site
        uses: CitybookServicesLTD/status-monitor@${await exports.getstatusMonitorVersion()}
        with:
          command: "site"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
      - uses: peaceiris/actions-gh-pages@v3.7.3
        name: GitHub Pages Deploy
        with:
          github_token: \${{ secrets.GH_PAT || github.token }}
          publish_dir: "site/status-page/__sapper__/export/"
          force_orphan: "${statusWebsite.singleCommit || false}"
          user_name: "${commitMessages.commitAuthorName || "CitybookServicesLTD Bot"}"
          user_email: "${commitMessages.commitAuthorEmail || "73812536+CitybookServicesLTD-bot@users.noreply.github.com"}"
`;
};
exports.setupCiWorkflow = setupCiWorkflow;
const siteCiWorkflow = async () => {
    const config = await config_1.getConfig();
    const workflowSchedule = config.workflowSchedule || {};
    const commitMessages = config.commitMessages || {};
    const statusWebsite = config["status-website"] || {};
    return `${await introComment()}

name: Static Site CI
on:
  schedule:
    - cron: "${workflowSchedule.staticSite || constants_1.STATIC_SITE_CI_SCHEDULE}"
  repository_dispatch:
    types: [static_site]
  workflow_dispatch:
jobs:
  release:
    name: Build and deploy site
    runs-on: ${config.runner || constants_1.DEFAULT_RUNNER}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Generate site
        uses: CitybookServicesLTD/status-monitor@${await exports.getstatusMonitorVersion()}
        with:
          command: "site"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
      - uses: peaceiris/actions-gh-pages@v3.7.3
        name: GitHub Pages Deploy
        with:
          github_token: \${{ secrets.GH_PAT || github.token }}
          publish_dir: "site/status-page/__sapper__/export/"
          force_orphan: "${statusWebsite.singleCommit || false}"
          user_name: "${commitMessages.commitAuthorName || "CitybookServicesLTD Bot"}"
          user_email: "${commitMessages.commitAuthorEmail || "73812536+CitybookServicesLTD-bot@users.noreply.github.com"}"
`;
};
exports.siteCiWorkflow = siteCiWorkflow;
const summaryCiWorkflow = async () => {
    const config = await config_1.getConfig();
    const workflowSchedule = config.workflowSchedule || {};
    return `${await introComment()}

name: Summary CI
on:
  schedule:
    - cron: "${workflowSchedule.summary || constants_1.SUMMARY_CI_SCHEDULE}"
  repository_dispatch:
    types: [summary]
  workflow_dispatch:
jobs:
  release:
    name: Generate README
    runs-on: ${config.runner || constants_1.DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update summary in README
        uses: CitybookServicesLTD/status-monitor@${await exports.getstatusMonitorVersion()}
        with:
          command: "readme"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
`;
};
exports.summaryCiWorkflow = summaryCiWorkflow;
const updateTemplateCiWorkflow = async () => {
    const config = await config_1.getConfig();
    const workflowSchedule = config.workflowSchedule || {};
    return `${await introComment()}

name: Update Template CI
on:
  schedule:
    - cron: "${workflowSchedule.updateTemplate || constants_1.UPDATE_TEMPLATE_CI_SCHEDULE}"
  repository_dispatch:
    types: [update_template]
  workflow_dispatch:
jobs:
  release:
    name: Build
    runs-on: ${config.runner || constants_1.DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update template
        uses: CitybookServicesLTD/status-monitor@master
        with:
          command: "update-template"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
`;
};
exports.updateTemplateCiWorkflow = updateTemplateCiWorkflow;
const updatesCiWorkflow = async () => {
    const config = await config_1.getConfig();
    const workflowSchedule = config.workflowSchedule || {};
    return `${await introComment()}

name: Updates CI
on:
  schedule:
    - cron: "${workflowSchedule.updates || constants_1.UPDATES_CI_SCHEDULE}"
  repository_dispatch:
    types: [updates]
  workflow_dispatch:
jobs:
  release:
    name: Deploy updates
    runs-on: ${config.runner || constants_1.DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update code
        uses: CitybookServicesLTD/updates@master
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
`;
};
exports.updatesCiWorkflow = updatesCiWorkflow;
const statusCiWorkflow = async () => {
    const config = await config_1.getConfig();
    const workflowSchedule = config.workflowSchedule || {};
    return `${await introComment()}

name: status CI
on:
  schedule:
    - cron: "${workflowSchedule.status || constants_1.status_CI_SCHEDULE}"
  repository_dispatch:
    types: [status]
  workflow_dispatch:
jobs:
  release:
    name: Check status
    runs-on: ${config.runner || constants_1.DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Check endpoint status
        uses: CitybookServicesLTD/status-monitor@${await exports.getstatusMonitorVersion()}
        with:
          command: "update"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
          SECRETS_CONTEXT: \${{ toJson(secrets) }}
`;
};
exports.statusCiWorkflow = statusCiWorkflow;
//# sourceMappingURL=workflows.js.map